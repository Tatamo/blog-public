<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Css on わたしろぐ</title>
    <link>http://tatamo.81.la/blog/tags/css/</link>
    <description>Recent content in Css on わたしろぐ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 06 Dec 2017 18:30:00 +0900</lastBuildDate>
    <atom:link href="http://tatamo.81.la/blog/tags/css/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Web技術ではじめるレポート・論文制作</title>
      <link>http://tatamo.81.la/blog/2017/12/06/web-dtp/</link>
      <pubDate>Wed, 06 Dec 2017 18:30:00 +0900</pubDate>
      
      <guid>http://tatamo.81.la/blog/2017/12/06/web-dtp/</guid>
      <description>
        

&lt;p&gt;この記事は&lt;a href=&#34;https://adventar.org/calendars/2491&#34;&gt;Kobe University Advent Calendar 2017&lt;/a&gt;の6日の記事です。
なお私は当該大学の学部3年(2017年12月現在)です。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://vivliostyle.com/ja/products/&#34;&gt;Vivliostyle&lt;/a&gt;やその他のWeb技術を用いて、HTMLとCSSで課題のレポートを書くための環境を作る話です。
あと「&lt;a href=&#34;https://pentapod.github.io/c92/&#34;&gt;CSSではじめる同人誌制作&lt;/a&gt;」を勝手に販促する記事でもあります。&lt;/p&gt;

&lt;h2 id=&#34;html-cssによる組版:ed3b1424743a59edb650e822cbfa39a9&#34;&gt;HTML+CSSによる組版&lt;/h2&gt;

&lt;p&gt;個人的にはWordもTeXもあまり得意ではない、というか、HTML+CSSで似たようなことができそうなのにわざわざWordやTeXを使うのが大変だと感じています(InDesignはよく知りません)。
文書構造の明確化という観点においては、構造と見た目が明確に分離しているHTML+CSSに勝るものはありません(筆者個人の主観です)。&lt;/p&gt;

&lt;p&gt;そこでWeb技術を用いてレポートや論文を書きたいなあと思っていたのですが、ちょうど&lt;a href=&#34;http://tatamo.81.la/blog/2017/08/27/seccamp-2017/#0日目&#34;&gt;セキュキャンの事前準備で行けなかった&lt;/a&gt;ときのコミケで、pentapodさんより「&lt;a href=&#34;https://pentapod.github.io/c92/&#34;&gt;CSSではじめる同人誌制作&lt;/a&gt;」が頒布されていたので、友人に頼んで確保しておいてもらいました。&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;内容については同人誌制作だけをターゲットに絞らず， できるだけ色々な場面で使えるような説明を心がけています．&lt;/blockquote&gt;
というあとがきの記述通り、CSS組版全般、また単にCSSの解説本としても読めるようになっており、本書を参考にしてレポートを書くための環境を整えることができました。
同人誌でもレポートでも論文でも、やりたいことは結局同じ組版であるため、整えるべき環境は変わりません。&lt;/p&gt;

&lt;h2 id=&#34;この記事で書くこと:ed3b1424743a59edb650e822cbfa39a9&#34;&gt;この記事で書くこと&lt;/h2&gt;

&lt;p&gt;CSSを用いた組版については、「&lt;a href=&#34;https://pentapod.github.io/c92/&#34;&gt;CSSではじめる同人誌制作&lt;/a&gt;」を直接読んでいただくのが一番早いため、今回はあまり詳しくは書きません。
&lt;a href=&#34;https://pentapod.booth.pm/items/601017&#34;&gt;300円というお手頃価格で電子版も出ている&lt;/a&gt;ので買ってください。
これは販促です。&lt;/p&gt;

&lt;p&gt;そこでこの記事では、本書を参考にしながら行った環境構築を中心に書いていきます。
構築した環境は &lt;a href=&#34;https://github.com/Tatamo/htmldtp&#34;&gt;https://github.com/Tatamo/htmldtp&lt;/a&gt; に上げていますが、「そもそもボイラープレートという単語を数日前にはじめて知った」レベルのためディレクトリ構成ひとつとっても正直褒められたものではないと感じています。
なのでまたちゃんと体裁を整えたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;vivliostyle:ed3b1424743a59edb650e822cbfa39a9&#34;&gt;Vivliostyle&lt;/h2&gt;

&lt;p&gt;とはいえ、&lt;a href=&#34;http://vivliostyle.com/ja/products/&#34;&gt;Vivliostyle&lt;/a&gt;については触れておかないと話が始まりません。
これはWeb技術による組版を目的としたプロジェクトで、CSSの将来的な仕様を先取りすることで、より多彩なレイアウトを実現できるようにしているものです。
&lt;a href=&#34;http://vivliostyle.com/ja/samples/&#34;&gt;サンプル&lt;/a&gt;が充実しており、実際にCSSによってデザインされた本と、その生のHTMLを閲覧することができます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://vivliostyle.github.io/vivliostyle.js/samples/css-secrets-long/viewer/vivliostyle-viewer.html#x=../doc/&#34;&gt;こういうレベルのこと&lt;/a&gt;がCSSで既に可能となっているのです。&lt;/p&gt;

&lt;p&gt;Vivliostyleを用いた印刷を行う方法は何種類かありますが、&lt;a href=&#34;https://chrome.google.com/webstore/detail/vivliostyle/ffeiildjegeigkbobbakjjmfeacadbne&#34;&gt;Chrome拡張&lt;/a&gt;を用いるのが最も簡単だと思われます。
目的のHTMLファイルを表示した状態で拡張機能を有効化するとレイアウトが紙面向けのものに変換されるので、これをChromeの印刷機能を用いて紙面やPDFに印刷します。&lt;/p&gt;

&lt;p&gt;そのため、Vivliostyleに対応したCSSファイルと、それを適用するための原稿となるHTMLファイルを用意することが目的となります。
HTMLとCSSの状態からPDFを生成する作業を自動化する方法についても「&lt;a href=&#34;https://pentapod.github.io/c92/&#34;&gt;CSSではじめる同人誌制作&lt;/a&gt;」では解説されていますが、今回は省略するので本書を購入してください。&lt;/p&gt;

&lt;p&gt;恥ずかしい話ですが、最近のCSS3の仕様をしっかり追いかけているわけではないため、どこからどこまでがVivliostyleによって実現されている機能で、どこまでがブラウザの標準機能で既にサポートされている部分なのかがよくわかっていません。
このあたりは書けば書くほどボロが出るに違いないので適当にごまかします。&lt;/p&gt;

&lt;h2 id=&#34;フレームワーク選定:ed3b1424743a59edb650e822cbfa39a9&#34;&gt;フレームワーク選定&lt;/h2&gt;

&lt;p&gt;書籍ではPug+marked+Stylus+Prism.js+MathJax+Browsersync+Gulpの構成が紹介されていましたが、このあたりは好みだと思うので適当に選んでいきました。&lt;/p&gt;

&lt;p&gt;結論としては、Nunjucks+nunjucks-markdown+PostCSS(cssnext+stylelint)+highlight.js+MathJax+Browsersync+Gulpという構成になりました。&lt;/p&gt;

&lt;h3 id=&#34;nunjucks:ed3b1424743a59edb650e822cbfa39a9&#34;&gt;Nunjucks&lt;/h3&gt;

&lt;p&gt;まずはHTMLテンプレートエンジンを選びます。
変数を用いた操作や別のHTMLの継承などの機能を取り入れることで、HTMLをより書きやすくして開発の高速化・再利用の促進を図ります。&lt;/p&gt;

&lt;p&gt;今回は&lt;a href=&#34;https://mozilla.github.io/nunjucks/&#34;&gt;Nunjucks&lt;/a&gt;を使うことにしました。
昔Djangoを触ったことがあるので見慣れたテンプレートであるという点などが採用理由です。
他には以前使ったことのあるEJS、紹介されていたPug(Jade)なども候補に上がりました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- template/_base.njk --&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;ja&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;{{ title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
{% block content %}
    &amp;lt;section&amp;gt;
        &amp;lt;p&amp;gt;default content&amp;lt;/p&amp;gt;
    &amp;lt;/section&amp;gt;
{% endblock %}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- index.njk --&amp;gt;
{% extends &amp;quot;template/_base.njk&amp;quot; %}
{% set title = &amp;quot;awesome-report&amp;quot; %}
{% block content %}
&amp;lt;section&amp;gt;
    &amp;lt;!-- awesome-report-content --&amp;gt;
&amp;lt;/section&amp;gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のような感じでHTMLにいろいろなものをくっつけていきながら書けるようになります。
Nunjucksで記述したHTMLは、.htmlのほかに.njkなどの拡張子を使ったりするらしいです。&lt;/p&gt;

&lt;h3 id=&#34;nunjucks-markdown:ed3b1424743a59edb650e822cbfa39a9&#34;&gt;nunjucks-markdown&lt;/h3&gt;

&lt;p&gt;ひたすら文章を書くのにいちいち&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;タグを書いたりしていられないので、Markdownを使えるようにすることが必要です。
Nunjucksを使うことにしたので、markedのNunjucks向けプラグインである&lt;a href=&#34;https://www.npmjs.com/package/nunjucks-markdown&#34;&gt;nunjucks-markdown&lt;/a&gt;を使うことにしました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{% block content %}
&amp;lt;section&amp;gt;
    {% markdown %}
    ## PPAP
    I have a pen.
    I have an apple.
    ```js
    console.log(&amp;quot;Apple pen!&amp;quot;);
    ```
    {% endmarkdown %}
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように、&lt;code&gt;{% markdown %}&lt;/code&gt;で囲った部分をMarkdownとして書くことができようになります。&lt;/p&gt;

&lt;h3 id=&#34;postcss-cssnext-stylelint:ed3b1424743a59edb650e822cbfa39a9&#34;&gt;PostCSS(cssnext+stylelint)&lt;/h3&gt;

&lt;p&gt;HTMLだけでなくCSSも次世代仕様を使用できるようにしておくと便利です。
SassやStylusという選択肢もありますが、この次世代CSS過渡期において独自記法マシマシのcoffeeとあくまでES2015をもとにしたtsならどちらを使うかという話です。
一通り必要な機能が入ったプラグイン集である&lt;a href=&#34;http://cssnext.io/&#34;&gt;cssnext&lt;/a&gt;と、lintをしてくれる&lt;a href=&#34;https://stylelint.io/&#34;&gt;stylelint&lt;/a&gt;を入れていますが、この構成だとSassのように&lt;code&gt;@import&lt;/code&gt;できない点で不便さがあるので、CSSをモジュール化できるようにするためにpostcss-importも入れたほうが良いかもしれません。&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;ja&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;gulp-postcssを使っている際にstylelintでインデント幅をlintするよう指定している状態でAutoprefixerなどで右寄せしたprefixが追加された場合、なぜかsrc側のCSSのインデントが崩れているとしてstylelintに怒られてしまうので、plugin設定にはstylelintを一番先に置くべきという知見を得ました &lt;a href=&#34;https://t.co/IMnmqibetC&#34;&gt;pic.twitter.com/IMnmqibetC&lt;/a&gt;&lt;/p&gt;&amp;mdash; たたもさん@がんばらない (@&lt;strong&gt;tatamo&lt;/strong&gt;) &lt;a href=&#34;https://twitter.com/__tatamo__/status/928286264914145280?ref_src=twsrc%5Etfw&#34;&gt;2017年11月8日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
これは余談です。&lt;/p&gt;

&lt;h3 id=&#34;highlight-js:ed3b1424743a59edb650e822cbfa39a9&#34;&gt;highlight.js&lt;/h3&gt;

&lt;p&gt;プログラムリストを貼り付けることが求められることもあるので、シンタックスハイライターを用意します。
他の候補としてはPrism.jsなどがあります。
今回はこのブログで使ったりして使い慣れている&lt;a href=&#34;https://highlightjs.org/&#34;&gt;highlight.js&lt;/a&gt;を用いました。&lt;/p&gt;

&lt;h3 id=&#34;mathjax:ed3b1424743a59edb650e822cbfa39a9&#34;&gt;MathJax&lt;/h3&gt;

&lt;p&gt;TeX形式で書いた数式を表示するために必須です。
&lt;a href=&#34;https://www.mathjax.org/&#34;&gt;MathJax&lt;/a&gt;以外の選択肢は特にないと言っていいでしょう。
適当なスニペットを&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;タグ内に追加し、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;p&amp;gt;MathJax test: $E = mc^2$&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などと書くだけで数式部分が整形されて表示されます。&lt;/p&gt;

&lt;p&gt;どうでもいい余談ですが、個人的にはMicrosoft Officeの数式エディタは見た目もきれいですし非常に使いやすいと思っています。
これについてはあまり同意されたことがない気がします。&lt;/p&gt;

&lt;h3 id=&#34;browsersync:ed3b1424743a59edb650e822cbfa39a9&#34;&gt;Browsersync&lt;/h3&gt;

&lt;p&gt;ソースコードが更新され(、そしてそれを検知してビルドが走って&lt;code&gt;dist/&lt;/code&gt;ディレクトリが更新され)たことを検知し、&lt;a href=&#34;https://www.browsersync.io/&#34;&gt;Browsersync&lt;/a&gt;が自動でブラウザを再読み込みしてくれるようにします。
わざわざF5を押さなくても変更が反映され、ビルド結果がすぐにブラウザ上で見れて便利…… なのですが、今回はブラウザを更新したあとVivliostyleのChrome拡張を有効化しなければならず、結局F5相当の動作を手で行わなければならないという難点があります。&lt;/p&gt;

&lt;h3 id=&#34;gulp:ed3b1424743a59edb650e822cbfa39a9&#34;&gt;Gulp&lt;/h3&gt;

&lt;p&gt;ビルドを自動化してくれるようにするためのタスクランナーです。
&lt;a href=&#34;https://gulpjs.com/&#34;&gt;Gulp&lt;/a&gt;は使っていますがGruntは使ったことがないです。
タスクランナーとは、&lt;code&gt;hoge&lt;/code&gt;というパッケージと一緒に&lt;code&gt;gulp-hoge&lt;/code&gt;を入れなければならなくなってpackage.jsonの依存パッケージ数が2倍近くに膨れ上がるという、とても素敵なものです。&lt;/p&gt;

&lt;p&gt;最近は何でもかんでもnpm-scriptsでやろうという話があって、確かに一理あるなあという感じなのでGulpじゃなくてもよかったかもしれません。&lt;/p&gt;

&lt;h2 id=&#34;全部突っ込む:ed3b1424743a59edb650e822cbfa39a9&#34;&gt;全部突っ込む&lt;/h2&gt;

&lt;p&gt;JavaScriptから利用するためのパッケージを一つも入れていない、というかJavaScriptを書くつもりがない(gulpfile除く)のに依存パッケージ数が10を越えるのはどういうことなんだ、という感じですが、とりあえず上記のツールを全部組み合わせます。
highlight.jsとMathJaxに関しては、&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;タグで読み込むだけでいいので&lt;code&gt;npm install&lt;/code&gt;は不要です。
Nunjucksのテンプレート継承機能を用いて、これらの読み込み用のスニペットをモジュール化しておくのがいいでしょう。&lt;/p&gt;

&lt;p&gt;Nunjucks(+nunjucks-markdown)とPostCSSを用いて、それぞれHTMLファイルとCSSファイルを生成する処理が行われるので、これをGulpのタスクとしてまとめてしまいます。
あとはソースコードの更新を検知して自動的にこのビルド処理が走るようにしたり、ビルド完了のタイミングでBrowsersyncに更新を伝えたりする処理を&lt;a href=&#34;https://github.com/Tatamo/htmldtp/blob/master/gulpfile.js&#34;&gt;gulpfile.js&lt;/a&gt;に書いて終わりです。&lt;/p&gt;

&lt;h2 id=&#34;使ってみた:ed3b1424743a59edb650e822cbfa39a9&#34;&gt;使ってみた&lt;/h2&gt;

&lt;p&gt;大学でパーセプトロンの出力を求めるだけのレポート課題が出たので、構築した環境を用いてレポートを書いてみました。&lt;/p&gt;

&lt;p&gt;以下に、Vivliostyleを用いて出力されたPDF(のスクリーンショットにモザイクかけたただの画像)を示します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tatamo.81.la/blog/images/post/2017/12/06/output_report.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://tatamo.81.la/blog/images/post/2017/12/06/output_report.png&#34; alt=&#34;PDFに出力されたレポート&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;図はLibreOffice Drawで用意しましたがそのあたりは適当です。&lt;/p&gt;

&lt;p&gt;これに用いたCSSは、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;@page {
  size: A4;
  margin: 20mm;
  @bottom-center {
    content: counter(page);
  }
}

figcaption {
  counter-increment: fig;
}

figcaption::before {
  content: &amp;quot;図&amp;quot; counter(fig) &amp;quot;. &amp;quot;;
}

/* うまく動かない(後述) */
a.figref::after {
  content: &amp;quot;図&amp;quot; target-counter(attr(href), fig);
}

img {
  max-width: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;だけであり、非常に簡潔なCSSで十分に見た目の整ったレポートを書くことができます。&lt;/p&gt;

&lt;p&gt;そういえば指定するのを忘れていましたが、当然&lt;code&gt;font-size&lt;/code&gt;でフォントサイズをポイント指定することも可能です。&lt;/p&gt;

&lt;h3 id=&#34;相互参照と問題点:ed3b1424743a59edb650e822cbfa39a9&#34;&gt;相互参照と問題点&lt;/h3&gt;

&lt;p&gt;図を示している部分のHTMLを抜粋すると、以下のようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;section&amp;gt;
    {% markdown %}
    ## パーセプトロンの提示
    まず、パーセプトロンの修正後の重みを&amp;lt;a class=&amp;quot;figref&amp;quot; href=&amp;quot;#fig-nn&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;に示す。
    &amp;lt;figure&amp;gt;
        &amp;lt;img src=&amp;quot;perceptron.png&amp;quot;&amp;gt;
        &amp;lt;figcaption id=&amp;quot;fig-nn&amp;quot;&amp;gt;パーセプトロン&amp;lt;/figcaption&amp;gt;
    &amp;lt;/figure&amp;gt;
    簡単のため、パーセプトロンのそれぞれのノードに番号を付与した。
    {% endmarkdown %}
&amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;figcaption::before&lt;/code&gt;の&lt;code&gt;content&lt;/code&gt;に&lt;code&gt;counter(fig)&lt;/code&gt;を用いることで、自動的に図表番号を振ることができます。&lt;/p&gt;

&lt;p&gt;それに加えて、&lt;code&gt;figcaption&lt;/code&gt;の持つidに対するリンクのcontentに&lt;code&gt;target-counter(attr(href), fig)&lt;/code&gt;を指定しています。
これは&lt;code&gt;attr(href)&lt;/code&gt;&amp;mdash;つまりhrefの属性値、&lt;code&gt;&amp;quot;#fig-nn&amp;quot;&lt;/code&gt;&amp;mdash;の地点での&lt;code&gt;counter(fig)&lt;/code&gt;のカウンタの値を取得しており、つまりその図表に割り当てられた番号が得られます。&lt;/p&gt;

&lt;p&gt;これによって相互参照が実現できます。&lt;/p&gt;

&lt;p&gt;と言ってドヤ顔したいところなのですが、ここで致命的な問題が発生します。
なぜかChrome拡張のVivliostyleでは、この&lt;code&gt;target-counter()&lt;/code&gt;がうまく動かず、図表番号が&lt;code&gt;??&lt;/code&gt;で表示されます。&lt;/p&gt;

&lt;p&gt;他の手段であるVivliostyle FormatterやVivliostyle Viewerを使えば動かせはするのですが、その場合highlight.jsによるシンタックスハイライトが効かなかったり、MathJaxは対応しているもののMathML以外の記法を使えない、などの別の問題が生じてきます。&lt;/p&gt;

&lt;p&gt;なので現状、&lt;code&gt;a.figref::after&lt;/code&gt;に対するスタイル指定を削除し、&lt;code&gt;&amp;lt;a class=&amp;quot;figref&amp;quot; href=&amp;quot;#fig-nn&amp;quot;&amp;gt;図1&amp;lt;/a&amp;gt;&lt;/code&gt;などと直接書くしかないという本末転倒感があります。&lt;/p&gt;

&lt;p&gt;これについては今のところ解決策を見つけられていないので、もう少し調べてみて必要ならissueを飛ばすなりしようと思っています。&lt;/p&gt;

&lt;h2 id=&#34;おわり:ed3b1424743a59edb650e822cbfa39a9&#34;&gt;おわり&lt;/h2&gt;

&lt;p&gt;レポート・論文程度ならそこまで凝ったデザインである必要がないので、非常に短いCSSでそれなりの印刷が可能になります。
HTML+CSSを用いてレポートを書くというのは十分に実用の範囲内だと思ったので、これからも試していこうと思っています。&lt;/p&gt;

&lt;p&gt;しかしながら、やはり現状で相互参照が実現できないというのはレポート・論文執筆には致命的なところがあります。
&lt;code&gt;target-counter()&lt;/code&gt;は策定中の次期CSS仕様であることから、解決は時間の問題だとは思っているのですが、なんとかしたいところです。&lt;/p&gt;

&lt;p&gt;今の時代のCSSは、もはやWebページだけでなく紙面上のレイアウトも自在に操れるようになってきています。「&lt;a href=&#34;https://pentapod.github.io/c92/&#34;&gt;CSSではじめる同人誌制作&lt;/a&gt;」はCSSを使ったさまざまな紙面レイアウトについて書かれており、とてもおすすめなのでぜひ購入してみてください。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>