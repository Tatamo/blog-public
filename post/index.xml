<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on わたしろぐ</title>
    <link>http://tatamo.81.la/blog/post/</link>
    <description>Recent content in Posts on わたしろぐ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 20 Feb 2016 02:39:08 +0900</lastBuildDate>
    <atom:link href="http://tatamo.81.la/blog/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Freecivオンラインプレイ解説 最初のターンの動き</title>
      <link>http://tatamo.81.la/blog/2016/02/20/freeciv-build-first-cities/</link>
      <pubDate>Sat, 20 Feb 2016 02:39:08 +0900</pubDate>
      
      <guid>http://tatamo.81.la/blog/2016/02/20/freeciv-build-first-cities/</guid>
      <description>
        

&lt;p&gt;日本のオンライン環境で主流となっている一人一島の島嶼戦マップにおける、ゲーム開始直後のユニットの動かし方およびマップの探索についての解説です。&lt;/p&gt;

&lt;h2 id=&#34;事前情報:cd98d413dde353aeb3f72d28458f2ca5&#34;&gt;事前情報&lt;/h2&gt;

&lt;p&gt;今回の本土となる島のスクリーンショットです。本来はゲーム開始時に知ることのできない情報ですが、題材とする島の広さを把握していただくために掲載します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img01.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img01.png&#34; alt=&#34;初期配置(観察状態)&#34; width=&#34;500&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ゲーム設定は、マップの生成方法：島ベース、開始地点の決定方法：大陸のサイズに合わせる、サイズ1、プレイヤー数7、丘/山の量0、小屋(先住民の集落)なし、(科学タブ)科学技術係数200%。
最小限の設定変更で、かつ日本のオンライン対戦で主流の設定と近いマップが生成されるようにしています。&lt;/p&gt;

&lt;h2 id=&#34;生まれ落ちる:cd98d413dde353aeb3f72d28458f2ca5&#34;&gt;生まれ落ちる&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img02.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img02.png&#34; alt=&#34;初期配置&#34; width=&#34;500&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;さて、あなたの文明がこの地に生まれ落ちたばかりの状態です。
一つ上の章でこの島の全景の画像が掲載されているようですが、忘れてください。
ゲーム開始直後、あなたはせいぜい周囲2タイル程度の情報しか知りません。&lt;/p&gt;

&lt;p&gt;今回の解説は、この状態から数ターンの間にどのようにユニットを動かし、マップを探索し、都市を建設するかを主眼に置いています。&lt;/p&gt;

&lt;h3 id=&#34;ユニットを動かす前に:cd98d413dde353aeb3f72d28458f2ca5&#34;&gt;ユニットを動かす前に&lt;/h3&gt;

&lt;p&gt;さて、あなたはすぐにでも手持ちの探検家ユニットを動かして、この暗い世界を少しでも明るく照らしたいと思ったかもしれません。
しかし、ちょっと待ってください。
どの方向にユニットを動かすのが最善なのでしょうか？&lt;/p&gt;

&lt;p&gt;探検家は1ターンに3タイル移動することができるので、最初のマップ探索の主力は探検家になります。
この貴重な探索ユニットを明後日の方角に向かわせてしまい、また元の場所に戻ってくるのに2ターンかかったとしたらどうでしょう？
より効率的に探索を行っていたならば、6タイルも向こう側の地形の情報を得られたかもしれません。
まずは、探検家をどの方角に向かわせるのが最善かを考えましょう。&lt;/p&gt;

&lt;p&gt;今得られている狭い視界だけで、今回の島がどのような形なのかを予想してみるのは良い方法です。
(もっとも、予想を立てるにしても、自分の島がおおよそどのくらいの広さなのかはおおよそ把握できておいたほうがいいと思われます。
しかしそれは、ゲームやゲームの設定に少し慣れていないと難しいことだと思います。
なので最初はだいたいでいいのです。)&lt;/p&gt;

&lt;p&gt;この島はどんな島なのでしょうか？わくわくしますね。&lt;/p&gt;

&lt;p&gt;おそらく、南東の方角に陸地がずっと続いている、というわけではないでしょう。
どう考えても南東には海が広がっています。こんな方向に探検家を向かわせる必要はありません。&lt;/p&gt;

&lt;p&gt;では北西は？
こちらはかなり向こうまで陸地が続いている可能性があります。
南東の海岸線がすでに見えているのですから、北西側の海岸までは距離が開いていると考えるのは妥当でしょう。
(もっとも、かなり細長い島が生成されることもそう珍しくはありません。だいたいの予想でいいのです。)&lt;/p&gt;

&lt;p&gt;北東、および南西方面はちょっと悩みどころです。
どちらの方向にも海岸線は見えていませんから、どれだけ陸地が続いているかはわかりません。
もちろん、陸地はいま見えている部分だけで、それより先は海、ということもあり得ます。&lt;/p&gt;

&lt;p&gt;どうやら、南東以外の方向に探検家を進ませるのがよさそうです。
といっても、北東、北西、南西と考えるだけでも、3つも選択肢が残っています。
ほかの情報も考慮して、どちらの方向へ探索を行えばいいのか考えていきましょう。
いったい、いつになればあなたのユニットは栄光ある一歩を踏み出すことができるのでしょう？&lt;/p&gt;

&lt;p&gt;まず、喫緊の課題として、あなたは帝国の最初の都市、つまり首都を建設する場所を決めなければいけません。
また初期ユニットの開拓者は2つありますから、2つ目の都市を建設する場所も考えてあげるべきでしょう。
文明に都市が1つもない状態を長く続けるべきではありません。
そのため、既に今見えているタイルのうちのいずれかに首都を建設するべきである可能性は高いと言えます。&lt;/p&gt;

&lt;p&gt;もう一度、あなたの狭い視界が何を捉えているかを確認しましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img02.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img02.png&#34; alt=&#34;初期配置&#34; width=&#34;500&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;西側にキジがありますね？
キジは専制政治下でも2/2/0と、要求を満たせるだけの食料、そして森の高い生産を両立できるとても優秀なタイルです。
もっとも、キジの上に直接都市を立てるのはあまり得策ではなかったり、また丘都市や森都市と併用すると産出される交易が0になってしまったりもしますが。
しかしそれはこのキジ(変換ミスではありません)の趣旨からは外れるため、詳しい解説は行いません。&lt;/p&gt;

&lt;p&gt;ともかく、キジは首都の都市圏内に含めるタイルとしては非常に良い特産物です。
このキジを首都で利用できるようにすることを考えましょう。
では、探検家をこのキジの近くに移動させればいいでしょうか？
とはいっても、南西方向に向かえばいいでしょうか、それとも北西方向に向かえばいいでしょうか。
そろそろ考えるのが面倒になってきたでしょうし、とりあえず探検家をキジの真上に移動させてみるのなんてどうでしょう？&lt;/p&gt;

&lt;p&gt;ここで、特に島嶼戦マップにおいては、都市をより海岸に寄せて建設するべきであるというセオリーを思い出しましょう。
これまた本記事の趣旨ではないので詳しい解説は見送りますが、より海に寄せて都市を建設することで、将来的に多くの海洋タイルを利用できる、国家の総面積が広がる、遠くまで見渡せるなどのメリットがあります。
なので、意気揚々と探検家を向かわせた先が内陸部であったなら、島嶼戦マップではあなたはちょっとがっかりするべきです。&lt;/p&gt;

&lt;p&gt;となると、海岸線に沿って探検家を移動させれば、移動した先も海岸に違いありません。
これはだいたい正しいのですが、完全に海岸線沿いにユニットを移動させた場合、ユニットの視界には退屈で変わり映えしない海がずっと映りつづけることに注意してください。
海岸線を把握することと同等に、陸地に何があるかを知ることも重要です。
あまりにべったりと海に沿って探検家を移動させることは、やはり得策とは言えません。
また、海岸線沿いに探検家を移動させていった場合、ユニットが半島の袋小路に入ってしまうこともあります。
そうなると同じタイルを往復するぶんの移動が無駄になってしまうので、その点にも気を付けたほうが良いでしょう。&lt;/p&gt;

&lt;p&gt;また、先ほど島の形を大まかに予想した際、北西方向にはしばらく陸地が続いている可能性が高い、と考えました。
仮に3タイル進んでも対岸が見えなかったとして、そんな内陸部に首都を建設するのはややセオリー外です。&lt;/p&gt;

&lt;p&gt;というわけで、あなたのユニットの記念すべき一歩は、探検家を西に移動させることで決定です。&lt;/p&gt;

&lt;h2 id=&#34;記念すべき一歩:cd98d413dde353aeb3f72d28458f2ca5&#34;&gt;記念すべき一歩&lt;/h2&gt;

&lt;p&gt;では早速……&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img03.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img03.png&#34; alt=&#34;最初の移動?&#34; width=&#34;500&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ちょっと待ってください！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;どれだけ引き延ばせば気が済むのか、と考えているかもしれませんが、ちょっと待ちましょう。
特に最初のターンは、一気に探検家を複数タイル移動させるべきではありません。
1タイル移動するだけでも視界は広がるので、それを考慮すれば次に移動する最善のタイルが変わってくるかもしれません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img04.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img04.png&#34; alt=&#34;(今度こそ)最初の移動&#34; width=&#34;500&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まあ、大して驚愕の事実などはありませんでしたが。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img05.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img05.png&#34; alt=&#34;2歩目は何処へ?&#34; width=&#34;500&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;マーカーをつけた2つのタイルのうち、次にどちらへ向かうかは難しい問題です。
つまり深く考える必要はないということです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img06.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img06.png&#34; alt=&#34;2歩目&#34; width=&#34;500&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;南へ移動したところ、そこが半島になっていることがわかりました。
&lt;strong&gt;当然、&lt;/strong&gt;3歩目の移動は北西の草原にでも向かわせましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img07.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img07.png&#34; alt=&#34;3歩目&#34; width=&#34;500&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これで南西方向の視界は晴れました。
そしてあなたの探検家は疲れ果てています。
残りのユニットをどう動かすかを考える時間です。&lt;/p&gt;

&lt;h2 id=&#34;首都-予定地-に開拓者を向かわせる:cd98d413dde353aeb3f72d28458f2ca5&#34;&gt;首都(予定地)に開拓者を向かわせる&lt;/h2&gt;

&lt;p&gt;首都は南西部に建設すると大まかに決まっています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img08.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img08.png&#34; alt=&#34;首都建設候補地&#34; width=&#34;500&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;クジラを都市圏内に入れることは良いことですし、普通は都市は草原か平野に建てるのが妥当です。
この2か所のうちどちらかに首都を建てることになるでしょう。
まあどちらにせよ開拓者を動かす場所は変わりません。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img09.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img09.png&#34; alt=&#34;首都のための開拓者移動&#34; width=&#34;500&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ここで、2つの候補地のうちどちらに首都を建てるかを決めてしまう必要は&lt;strong&gt;ありません&lt;/strong&gt;。
次のターンになれば探検家を再度動かすことができ、それによってより多くの情報が得られるからです。
それらの情報も踏まえたうえで、どこに首都を建てるのかを判断します。&lt;/p&gt;

&lt;h2 id=&#34;2つ目の都市をどこに建てるかを考える:cd98d413dde353aeb3f72d28458f2ca5&#34;&gt;2つ目の都市をどこに建てるかを考える&lt;/h2&gt;

&lt;p&gt;さて、首都を建てる位置も(だいたいは)決まりました。
しかし、2つ目の都市をどこに建てるかはまだ考えていません。
考えましょう。&lt;/p&gt;

&lt;p&gt;都市と都市の間隔は、大いにプレイヤーの好みによるものの、桂馬飛びの場所に2つの都市が位置していても特に問題はないと一般に言われています。
問題ないというのは、2つの都市が遠すぎないという意味ではなく、近すぎないという意味です。
ここでは、記事を書いた人の好みのため、桂馬飛びよりも1タイルほど遠い位置に都市を配置していくことを考えたいと思います。&lt;/p&gt;

&lt;p&gt;もちろん、首都に向かった最初の開拓者と全く同じルートを2つ目の開拓者にも向かわせるのは得策とは言えません。
既に首都を建てる位置は(おおまかに)決まっているので、別の土地を探さなければいけませんし、そこはまだ闇の中です。
初期位置から東側に2つ目の都市を建てることを考えましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img10.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img10.png&#34; alt=&#34;第二都市建設候補地&#34; width=&#34;500&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;考えるのもそろそろ面倒になってきています。
ちょうど初期地点の南東にいい感じの海岸があるので、ここに都市を建てるのがいいのではないでしょうか。&lt;/p&gt;

&lt;p&gt;おっと。この2つの候補地のうち、南側の草原に都市を建ててしまう場合、もし首都を南の平地に配置したならば桂馬飛びの位置になってしまいます。
実際、それは何の問題もないのですが、ここでは記事を書いた人がそれを嫌っているので、やめておくことにしましょう。
なんとも我が儘な理由ではありますが、都市の配置方法はプレイヤーによって非常に個性が出ると言われているもので、その個性というのも、だいたいこういった理由から生じているのです。&lt;/p&gt;

&lt;p&gt;では、平野のほうに2つ目の開拓者を向かわせることで良さそうです。
早速開拓者を1タイル東に向かわせて…&lt;/p&gt;

&lt;p&gt;本当にそれでいいのでしょうか？&lt;/p&gt;

&lt;p&gt;よく考えてみてください。
今検討しているのは、&lt;strong&gt;2番目の&lt;/strong&gt;都市の建設地点です。
このゲームでは最初に建設された都市が首都になりますから、2番目の都市は2番目に建設される必要があります。
(実際、これは非常に大きな問題です。
専制政治下では首都にのみ75%もの生産ボーナスが与えられる他、まあいろいろな違いが生じます。)&lt;/p&gt;

&lt;p&gt;ところで首都を建設するための開拓者は現在、まだその途上にいます。
次のターンに予定地に到達し、さらにその次のターンになってやっと首都が実際に建設されるでしょう。
ここで第二都市用の開拓者をすぐに予定地に向かわせても、1ターン余計に待っている時間が生じてしまうのです。&lt;/p&gt;

&lt;p&gt;たとえば、まだ見えていない北東部に、第二都市を建設するのにもっと適した場所があるかもしれません。
もちろん、そんなことを言っていて都市の建設が遅れては本末転倒です。
しかし現時点で1ターンの時間の余裕があるのですから、これは活用するべきです。&lt;/p&gt;

&lt;p&gt;非常に幸いなことに、初期地点から北東に向かって川が伸びています。
探検家以外の初期ユニットは通常、どれも1ターンに1タイルしか移動することができません。
しかし川に沿った移動は、移動力を1/3しか消費しません。
つまり川の上を移動する場合は、通常のユニットでも探検家のような移動力を得るというわけです。
この川を利用して、北東方向の視界を広げてみましょう。&lt;/p&gt;

&lt;p&gt;とはいえ、開拓者をいきなり探索に向かわせるのは、往々にして避けるべきです。
こんなところに移動するんじゃなかった、と思っても引き返すのに合計2ターンかかり、その遅れがそのまま都市建設の遅れに直結するためです。
なので、代わりに労働者を向かわせて先の様子を見させるのが良いでしょう。&lt;/p&gt;

&lt;p&gt;労働者の本分は労働なので、よくわからない未開の地に向かわせるよりも地形改善のための労働をするべきだ、と思われるかもしれません。
実際それは正しく、あまり長い間労働者に探検家の真似ごとをさせるべきではありません。
どこで労働者を探索に使うのをやめるか、というのはやや難しい問題です。
とはいえ、2都市目の建設予定地を探すために2体いるうちの片方の労働者を数ターン探索に割り当てるくらいは、全く問題ではないと言っていいでしょう。&lt;/p&gt;

&lt;p&gt;では早速……&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img11.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img11.png&#34; alt=&#34;労働者の探索?&#34; width=&#34;500&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ちょっと待ってください！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;この期に及んで、1タイルずつ移動しろ、と言おうとしているのではありません。
そもそも、1タイル移動したところで見えるタイルが新しく増えるわけではなく、すべて既視圏内です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img12.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img12.png&#34; alt=&#34;ちょっとお得&#34; width=&#34;500&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;川に沿っての移動は移動力を1/3しか消費せず、またユニットはたとえ移動力が1/3しか残っていなくても0でないならば移動ができます。
なのでこのように一度川に沿って移動した後に目的タイルに移動すれば、どちらも同じ1ターンの移動ですがより多く移動でき、見えるタイルが増えます。
小手先のテクニックですね。
とはいえ、ゲーム開始時の都市展開において、情報は非常に重要です。
1タイルでも広く見えるような、効率的な移動を心がけると良いでしょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img13.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img13.png&#34; alt=&#34;労働者の探索&#34; width=&#34;500&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;北東方面では、あまり東のほうまで海岸線が続いているわけではなさそうです。
ところで、マーカーをつけた部分は視界外となっています。
まあこの海岸線の形を見れば、ここがきっと海だろうということは容易に想像できます。
なのでこのような場所を調べるために、特に最初の都市が建つ前は、わざわざ往復の手間をかけてユニットを向かわせるべきではないと言えます。&lt;/p&gt;

&lt;p&gt;もっとも、こういう海だろうと思った場所が海でなかった、ということは&lt;strong&gt;稀によくあります&lt;/strong&gt;。
仮にそのようなことが起こっても柔軟に対処できるよう、選択肢は広く持つようにしましょう。&lt;/p&gt;

&lt;p&gt;ここで良くないことに気付くのですが(実際のところ、とっくに気付いていておかしくなかったのですが)、先ほど想定していた平野に第二都市を建設した場合、どうやらクジラを得られないようです。
都市を建設したときに、食料2と生産1を産出するタイルを利用可能であることは非常に重要です。
当然本記事では詳しい解説は行いませんが。&lt;/p&gt;

&lt;p&gt;実際、都市を建ててみたら対岸にも土地があり、そこに付随していたクジラを利用できた、というラッキーは存在します。
しかしそれは都市を建ててはじめてわかることであり、頼るべきことではありません。
この場合、労働者を使って平野を灌漑する必要がありますが、平野の灌漑は意外と時間がかかり、その間都市は十分なタイル産出を得られないので、スタートダッシュに多少なりとも影響を及ぼします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img14.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img14.png&#34; alt=&#34;第二都市の新たな建設候補地&#34; width=&#34;500&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このタイルに第二都市を建設してみるのはどうでしょうか？
もちろん、まだ周囲の視界が十分に得られていません。
次のターンに労働者を移動させることで、ようやく周囲のタイルがどのようであるかをある程度把握できるでしょう。
しかしここがなかなか良い立地である可能性もあります。
(その理由を問われればいろいろな要素を提示できますが、それはおおよそ、これまでのゲームの経験に基づいて類似する状況との関連性、および付随するマップ設定などの情報から有機的に導出したものであり、一般にそれは勘と呼ばれることがあります。)&lt;/p&gt;

&lt;p&gt;今労働者を動かした場所に開拓者を動かしたならば、どうでしょうか？
次のターンに労働者を北に1タイル動かして、そこが都市建設に適した場所かどうか知ることができます。
仮にそれが幻滅するような結果であった場合には、開拓者を南に動かせば元々の建設予定地に移動できますし、それでも首都が建つのと同じターンに第二都市を建設できます。
北のほうが都市建設に良さそうなタイルであれば、開拓者を北に動かすこともできます。&lt;/p&gt;

&lt;p&gt;優柔不断ではないか、と思われるかもしれませんが、1ターンのうちに得られる情報には限りがあります。
より多くの情報を得た状態で判断ができるなら、その選択肢を多めに用意しておくことは良いことではないでしょうか。&lt;/p&gt;

&lt;h2 id=&#34;最後の労働者を移動させる:cd98d413dde353aeb3f72d28458f2ca5&#34;&gt;最後の労働者を移動させる&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img15.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img15.png&#34; alt=&#34;移動していない最後のユニット&#34; width=&#34;500&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;というわけで、2体目の開拓者もまた期待と不安の入り交じった旅路へと出発しました。
ところで、初期地点にまだ労働者が1ユニット残っています。
こいつを動かしましょう。&lt;/p&gt;

&lt;p&gt;ここで労働者をどう移動させるか、というのはやや難しい判断が必要なように思われます。
まず、第二都市がクジラを得られない可能性が高まっています。
その場合、近くの平野を速やかに灌漑しなければなりませんが、労働者2ユニットを同時に灌漑に充てれば作業時間は短く済みます。&lt;/p&gt;

&lt;p&gt;一方で、現時点で首都と第二都市の間は川で隔たりができています。
最初に2つの都市の間を道路で結ぶというのは悪くない選択であることが多いですが、今回は川に遮られるため道路を引くには迂回せざるを得ず、さらに次のターンの探索次第では都市と都市の距離が開く可能性もあります。
このような状況では、首都と第二都市との間でユニットを移動させるのに時間がかかります。
首都周辺でも地形改善の必要はありますが、労働者2ユニットともを東に向かわせてしまった場合、首都周辺のタイルを労働者で改善できるようになるまでにかなり時間がかかるでしょう。&lt;/p&gt;

&lt;p&gt;これらの状況や、今後どのタイルにどのような改善が必要か、ということも考慮して労働者をどう動かすか決める必要があります。
つまり、勘に頼るのがいいでしょう。&lt;/p&gt;

&lt;h2 id=&#34;0ターン目の移動の完了:cd98d413dde353aeb3f72d28458f2ca5&#34;&gt;0ターン目の移動の完了&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img16.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://tatamo.81.la/blog/images/post/2016/02/20/img16.png&#34; alt=&#34;最初のターン、移動終了&#34; width=&#34;500&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;首都周辺の地形改善ができない、例えば道路が引けないのは問題が多いと考えたため、2体目の労働者は西へ向かわせることにしました。&lt;/p&gt;

&lt;p&gt;これですべてのユニットが移動を終えました。
おめでとうございます。
あなたはようやく最初のターンを終えられます。&lt;/p&gt;

&lt;p&gt;まだ最初のターンであるにもかかわらず、これだけ多くのことを考えないといけないのか、とあなたはげんなりしているかもしれません。
ですが安心してください。
まず第一に、最初のターンだからこそ考えなければならないことが多くある、ということです。
次に、この記事の解説は無駄に冗長であるということです。
このようなろくでもない記事を長々と読む羽目になってしまったあなたの心中は察するに余りありますが、しかし記事が無駄に長ったらしいのであって、実際にたくさんのことをやらなければならないのだ、と悲観する必要はないと言えるでしょう。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>うくらいなにっき(Freecivマルチレポ) 2016/01/30</title>
      <link>http://tatamo.81.la/blog/2016/02/17/freeciv-2016-01-30/</link>
      <pubDate>Wed, 17 Feb 2016 22:35:10 +0900</pubDate>
      
      <guid>http://tatamo.81.la/blog/2016/02/17/freeciv-2016-01-30/</guid>
      <description>
        

&lt;p&gt;以前&lt;a href=&#34;http://sns.prtls.jp/freecivsnsneo/&#34;&gt;FreecivSNS&lt;/a&gt;でプレイレポートを投稿していましたが、今回より&lt;a href=&#34;http://tatamo.81.la/blog/&#34;&gt;本ブログ&lt;/a&gt;上で再開することにします。&lt;/p&gt;

&lt;p&gt;SNSには外部ブログの読み込み機能を利用して本記事の内容を後日投稿する予定です。そちらではコメントをつけていただくこともできます。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;序盤から同盟国を援護しつつ1国滅ぼし、そのまま続けて世界大戦に突入して勝利。&lt;/p&gt;

&lt;h2 id=&#34;ゲーム概略:28daa66540c07a81521e24fffe429e66&#34;&gt;ゲーム概略&lt;/h2&gt;

&lt;p&gt;2ch定期鯖(土曜夜)。不平等大陸マップ、プレイヤー数6。&lt;/p&gt;

&lt;p&gt;スコアログ：&lt;a href=&#34;http://ux.getuploader.com/freeciv2145/download/540/2016-01-30.log&#34;&gt;http://ux.getuploader.com/freeciv2145/download/540/2016-01-30.log&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;スクリーンショット:28daa66540c07a81521e24fffe429e66&#34;&gt;スクリーンショット&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://tatamo.81.la/blog/images/post/2016/02/17/96731aa4ad3bb2936445da24bda4be54.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://tatamo.81.la/blog/images/post/2016/02/17/96731aa4ad3bb2936445da24bda4be54.png&#34; alt=&#34;スコア&#34; width=&#34;700&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;http://tatamo.81.la/blog/images/post/2016/02/17/0ece8e0f23652cef29112fdee3f8b66a.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://tatamo.81.la/blog/images/post/2016/02/17/0ece8e0f23652cef29112fdee3f8b66a.png&#34; alt=&#34;民族一覧&#34; width=&#34;700&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;http://tatamo.81.la/blog/images/post/2016/02/17/b112e302b4aae27a9dab717ab8d1457d.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://tatamo.81.la/blog/images/post/2016/02/17/b112e302b4aae27a9dab717ab8d1457d.jpg&#34; alt=&#34;本土&#34; width=&#34;700&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;http://tatamo.81.la/blog/images/post/2016/02/17/e5fb33d2d0525688fc7b37fef5289b4d.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://tatamo.81.la/blog/images/post/2016/02/17/e5fb33d2d0525688fc7b37fef5289b4d.jpg&#34; alt=&#34;本土,北極&#34; width=&#34;700&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;http://tatamo.81.la/blog/images/post/2016/02/17/b76e1c6b699420316618810450b9951f.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://tatamo.81.la/blog/images/post/2016/02/17/b76e1c6b699420316618810450b9951f.jpg&#34; alt=&#34;他国&#34; width=&#34;700&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;序盤:28daa66540c07a81521e24fffe429e66&#34;&gt;序盤&lt;/h2&gt;

&lt;h3 id=&#34;ゲーム開始:28daa66540c07a81521e24fffe429e66&#34;&gt;ゲーム開始&lt;/h3&gt;

&lt;p&gt;ウクライナの初期配置は大陸の東側付近。西にフィンランド、東にハッカーと接触する。
フィンランド首都とは距離が開いていたため、大陸を東西に分けるように流れていた川を境界として領土を分けることを提案。
フィンランドはこれに合意し、互いに衝突は発生せず停戦。&lt;/p&gt;

&lt;p&gt;フィンランドとの国境線が画定したため、自国領を広く獲得するためにハッカーと国土を接する大陸東部への入植を優先させることに。
しかしここで、防衛がおそろかになっていたハッカーの第二都市が、ハッカー領北西部に領土を持つアッシリアの攻撃によって破壊される。
ハッカーは1都市のみに追い込まれ、アッシリアがハッカー方面に都市を建設、領土を拡大させる姿勢を見せる。&lt;/p&gt;

&lt;h3 id=&#34;ハッカーとの同盟:28daa66540c07a81521e24fffe429e66&#34;&gt;ハッカーとの同盟&lt;/h3&gt;

&lt;p&gt;都市数1のハッカーはアッシリアに対して圧倒的に不利であることは明らかであった。
仮にアッシリアがハッカーを滅亡させた場合、アッシリアとウクライナの国境線が接し、さらにハッカー攻撃に用いた兵力をもってウクライナへの攻撃が行われる可能性があった。
そこでハッカーの都市がアッシリアに破壊された直後、即座にウクライナはハッカーに対し同盟を打診。アッシリア-ハッカー間の戦争への介入を決定する。&lt;/p&gt;

&lt;p&gt;まだ大陸内の入植が完了していたわけではなかったため、弓兵数ユニットをハッカー首都に派遣しつつ、都市展開を優先させる。
ハッカーの注意が対アッシリアに向いていたため、ハッカーとウクライナの間にあった大陸東端の地帯はほぼすべてウクライナ領となった。&lt;/p&gt;

&lt;p&gt;兵法→石工術を研究したあとは通常通り筆記→君主制を目指す。
フィンランドとは不戦を保ちつつ、ハッカーに数学の研究を指示。
一時的に都市をハッカーに貸与して研究を加速させる。
数学の研究完了に伴って、アッシリア侵攻のため全都市でカタパルトの生産に入る。&lt;/p&gt;

&lt;h3 id=&#34;対アッシリア侵攻:28daa66540c07a81521e24fffe429e66&#34;&gt;対アッシリア侵攻&lt;/h3&gt;

&lt;p&gt;こちらが数学を取得するのと同時にアッシリアは車輪の研究を完了させる。
チャリオットによる視界外からの奇襲が想定されるため、ハッカーに警戒するよう指示。
ハッカーが前線に都市を建設しようと試みるが、ハッカーとアッシリアのプレイヤーの技量差のため何度も迎撃され失敗に終わる。
その間に本国でカタパルト8が完成、弓兵4とともにハッカー領に派遣する。
外交官を用いて敵の前線都市を調査したところ想定よりも防御ユニットが少なかったため、カタパルトを突入させ2都市破壊。
これによって元ハッカー領よりアッシリアを追い出すことに成功する。&lt;/p&gt;

&lt;p&gt;さらに進軍するためには川を越える必要があり、そのまま進軍して攻撃を加えるのがやや難しいこと、また仮に攻撃が成功しても増援を送るのに1ターン以上かかることから、破壊したアッシリア都市と同地点に都市を建設するよう指示。
この川都市から川を伝ってアッシリア領に進軍する方針を固める。&lt;/p&gt;

&lt;p&gt;ところで、ウクライナが対アッシリア戦争に邁進している間に他国は地図の研究を完了させ、外洋への進出を開始していた。
そして、船を使ってやってきた大陸の反対側の端に位置しているアイスランドがウクライナと接触する。
アイスランドは元々の国土の狭さから隣国のアステカに圧迫されており、接触よりしばらくして本土の全都市が陥落。
大陸西部はアステカとフィンランドの2国のみが支配することとなった。
ウクライナはアッシリアとの戦争状態にあるためアイスランドに対する具体的支援は行えなかったが、北極へのアイスランドの入植を全面的に支持することとする。
北極へは大陸東部より航路が開いていたが、アッシリア・ハッカー・ウクライナが戦争状態にあるため競合国は少ないものと思われた。
実際にアイスランドはアステカの妨害を受けつつも、北極の入植可能地帯をすべて取得することに成功する。
また、南極は全く戦争を行わず内政に注力する余裕のあったフィンランドが獲得する。&lt;/p&gt;

&lt;h2 id=&#34;中盤:28daa66540c07a81521e24fffe429e66&#34;&gt;中盤&lt;/h2&gt;

&lt;h3 id=&#34;アッシリア制圧:28daa66540c07a81521e24fffe429e66&#34;&gt;アッシリア制圧&lt;/h3&gt;

&lt;p&gt;アイスランドが北極入植を行う際にアッシリア近海を航行し、防御ユニットのいない空都市が存在していることを伝えてきたため、弓兵2ユニット程度を派遣してこの都市を破壊。
アッシリアの後方を荒らして国力を削ぎつつ、主力をアッシリア国境の川へと集結させる。&lt;/p&gt;

&lt;p&gt;一切の戦争を経ず内政を続けていたフィンランド、そしてアイスランドを完全に追い出して大陸西部を統一したアステカがともに勢力を伸ばしており、この両国が比較的友好な関係にあるとの情報ももたらされていた。
実際、この両大国が今後のウクライナ、そして全世界にとって最大の脅威となることも容易に予想される。
アイスランドがアッシリアは講和に応じる構えを見せており、この仲介に入る用意があると打診してきた。
しかしすでにウクライナ軍の主力はアッシリアを射程に捉えていること、アッシリアは軍事に大半のリソースを割り振っていたために技術・内政が大幅に遅れており、講和して共闘関係をもつには国力が低すぎること、またここで停戦してもハッカーが本来の領土を回復するだけで得られるものが少ないことなどの理由より、この提案を退けて戦争の継続を決定。&lt;/p&gt;

&lt;p&gt;川伝いに進軍し、森川に弓兵を展開させてアッシリア前線の都市を半包囲。これによって敵の迎撃を防ぎつつ、後方にカタパルトの主力を展開させる。
敵都市をカタパルトの射程内に収めることに成功し、そのまま突入させ敵都市を破壊。続けて川沿いの都市を2つ破壊することに成功する。
ハッカーに前線都市建設を指示し、これの完成とユニットのHP回復を待ってから攻撃を再開。
敵首都は防御の堅い丘川だったため一度迂回して残りの都市をすべて破壊する。
アッシリア首都に全軍を突入させて占領、ターン116にアッシリアは滅亡した。
ちょうどアッシリア首都が破壊されずにウクライナの占領下におかれたため、元アッシリア領西部をウクライナの領土とし、これによってウクライナは10都市を領することとなった。&lt;/p&gt;

&lt;h3 id=&#34;終戦-そして次の戦争へ:28daa66540c07a81521e24fffe429e66&#34;&gt;終戦、そして次の戦争へ&lt;/h3&gt;

&lt;p&gt;とはいえ、この間にフィンランドは政体を共和制に移行、祝典状態に突入して国力を大幅に引き上げはじめていた。
また当然技術力でも長期にわたる戦争によってウクライナは遅れをとっていた。
しかし幸いなことに、フィンランドがアイスランドに技術支援として供与した技術がウクライナにもたらされ、一時的にではあるがフィンランドと同等の科学技術を得られた。
またアイスランドはアステカに対する敵意とフィンランド-アステカ陣営が脅威であるとの認識からウクライナと友好関係を深め、ウクライナ-ハッカー同盟とアイスランドとの視野の共有も成立した。&lt;/p&gt;

&lt;p&gt;フィンランドとアステカは頻繁に技術協力を行っており、完全に脅威となる存在だったが、この両国は航海術ルートへ研究を進めており、火薬ルートではむしろウクライナ-ハッカー同盟側のほうが先行していた。
ウクライナは戦後復興を進め内政を整えたい時期ではあったが、このまま互いに内政に注力した場合、南極を支配するとともに、既に交易を進め共和祝典に入っているフィンランド側が時間の経過とともに有利になっていくことは明白であった。
そこで、フィンランドが火薬を取得する前の、さらに生産力の弱まる共和制の時代のうちに先制攻撃を仕掛け、フィンランドの国力に打撃を与える以外に勝算はないと判断。急遽対フィンランド戦争の構えに入る。&lt;/p&gt;

&lt;p&gt;幸いなことに南極のアイスランド都市からキャラバンが送られており、最低限の交易路が開通していた。
11都市を擁し共和制下にあるフィンランドはアッシリア滅亡時点で経済力約60と、他国すべてを圧倒していたが、フィンランドの次には経済力30のウクライナが2位に立っていた。
ウクライナは橋梁建設の研究を行い、フィンランドの間にある川の上に道路を建設。
アッシリア滅亡と同時期に締結されたウクライナ-フィンランド間の停戦条約が期限切れとなると同時に渡河攻撃を開始、1都市の占領に成功してフィンランドとの戦争へと突入する。&lt;/p&gt;

&lt;p&gt;この時点で大陸西部と南極を手に入れたフィンランドとアステカが協力関係にあり、アッシリアを滅亡させ大陸東部を平定したウクライナはハッカーと同盟。
またアステカに大陸を追い出され、北極へ移住したアイスランドもウクライナ側との協力関係にあった。
残存する国家が2つの陣営に分かれており、ウクライナによるフィンランド攻撃は事実上世界大戦の始まりであったといえる。&lt;/p&gt;

&lt;h3 id=&#34;対フィンランド全面戦争:28daa66540c07a81521e24fffe429e66&#34;&gt;対フィンランド全面戦争&lt;/h3&gt;

&lt;p&gt;先制攻撃によって都市を奪取することに成功するが、川をまたいだ敵前線への攻撃であったため、この都市へ至る道路は建設されていなかった。
この都市とウクライナ本土との間に道路を建設しなければならず、それまでの数ターンは増援の投入も時間がかかるため、即座に次の都市への攻撃へ移ることはできなかった。
その間にフィンランドは対ウクライナ戦争の態勢へ移り、全都市に城壁を建設してウクライナの攻撃に備える構えに入る。&lt;/p&gt;

&lt;p&gt;そのため丘都市であるフィンランド首都は目前であったものの、城壁の存在からカタパルトをもってしても陥落させることは困難と思われた。
ウクライナが都市横に要塞を建設して広範囲の視野を得たためフィンランド側が都市奪還を狙うことは難しく、またウクライナ側の兵力も都市を落とすに足りなかった。
小規模のユニットの衝突や、本国から占領都市への補給線を絶とうとするフィンランド軍のウクライナ本土側への侵入などが繰り返されながらも戦線は膠着する。&lt;/p&gt;

&lt;p&gt;20ターン近くの間睨み合いが続くが、ここでウクライナが火薬の研究を完了。前線の弓兵をマスケット兵にアップグレードして攻勢に移る。
首都を迂回してフィンランド本土西側に食い込み、2都市を続けて占領。
この攻撃中にフィンランドが火薬を取得したため、これ以上の攻勢は困難となる。
フィンランド西部にまで食い込んだためアステカとも国境を接することになり、城壁が建っておらず平地であったアステカ都市が射程に入ったため、余剰のマスケット兵を投入して2都市を破壊することに成功する。
こちらにもマスケット兵がいるためにしばらくフィンランド側は都市の奪還ができないと判断し、ここで攻撃を中断して占領した都市の防御を固めることに。&lt;/p&gt;

&lt;p&gt;フィンランドの都市3つを奪取し、ウクライナ13都市とやや都市数が増えすぎたため、アッシリア領の3都市をハッカーに移譲する。
またフィンランドの注意が本土に向いていると考えたため、南極にマスケットおよびカタパルトを派遣、狙い通り1都市を占領することに成功する。
しかしこの攻撃によって逆に、こちらの注意が本土から離れてしまっており、次のターンにフィンランド軍およびアステカ軍の総攻撃を受けてフィンランド領の最も西側にある都市を奪還されてしまう。&lt;/p&gt;

&lt;h2 id=&#34;終盤:28daa66540c07a81521e24fffe429e66&#34;&gt;終盤&lt;/h2&gt;

&lt;h3 id=&#34;小康-内政への注力:28daa66540c07a81521e24fffe429e66&#34;&gt;小康、内政への注力&lt;/h3&gt;

&lt;p&gt;以降は、フィンランド領都市に対する外交官による城壁破壊工作に曝されつつも戦闘は小康状態となる。
民主主義を獲得したウクライナはこの機に政体を移行、即座に祝典に移る。&lt;/p&gt;

&lt;p&gt;互いに決定打を与えられるよう内政に注力し、ウクライナはその都市数を活かして世界最大の経済力を持つ国家へ成長する。
しかしその間、祝典の維持と都市建造物を揃えるために研究は停止し、共和制下で既に祝典を行っていたフィンランドが再び研究面で優位に立つ。&lt;/p&gt;

&lt;p&gt;祝典を終え経済基盤を整えたウクライナはフィンランドの倍近い研究速度を叩き出し、また相変わらずのアイスランドの工作によりフィンランドの技術がアイスランド、ハッカーを経由してウクライナに流入した。
これによってウクライナはフィンランドと同等の技術水準まで追いつくが、しかしフィンランドは一足先に冶金学および鉄道の研究を済ませ、ユニットの大量生産態勢に移行しつつあった。&lt;/p&gt;

&lt;p&gt;ウクライナが国力の大半を内政に注いでいたころ、アステカがハッカーの東端の都市を奇襲、占領。
ハッカーはこの都市を奪還できず、数十ターン後に何らかの交渉をまとめたらしくハッカーとアステカの間に休戦が成立する。
曰くアステカがアイスランドを滅亡させた暁にハッカーへ都市が返還されるとのことであり、またハッカーはこのアステカ側の提案を呑みつつも奪還の機会を伺っているとのことであった。
そんな果たされるはずもない交渉を表面的にでも受け入れてしまうあたり、ハッカーのプレイヤースキルがまだまだ成長の余地があるなと思いつつ、周囲の都市に防御ユニットが揃っており奇襲を受けたとしてもそう簡単には落ちないということを確認して放置。
実際、先の2度にわたる戦争においてハッカーの軍事力がろくに役立ったことはなく、実質的にほぼウクライナ単独の戦争であったため、大して同盟国であるハッカーを重要視していなかったのである。&lt;/p&gt;

&lt;p&gt;なお後に判明することであるが、この際ハッカーはウクライナ陣営の視界をアステカ側に横流ししており、完全にウクライナに対する裏切り者であった。&lt;/p&gt;

&lt;h3 id=&#34;2度目の開戦:28daa66540c07a81521e24fffe429e66&#34;&gt;2度目の開戦&lt;/h3&gt;

&lt;p&gt;先に祝典を済ませていたことによる内政の優位から、フィンランドはウクライナより先に戦争準備を完了させる。
全国土に張り巡らせた鉄道によって瞬時に大陸内すべてのカノン砲を集結させ、元フィンランド都市へ一斉攻撃をかけ占領。
さらにもう1都市を占領するが、ウクライナは態勢を整えてこれを即座に奪還。
ここに再び2大陣営間の戦争が勃発する。&lt;/p&gt;

&lt;p&gt;ウクライナ側およびフィンランド-アステカ同盟はともにカノン砲を大量生産し、鉄道の輸送力をもって兵力を集中させ敵都市へ攻撃を加えた。
戦局は先制したフィンランドの優位に進み、ウクライナ本国の都市3つが破壊される。
ハッカーは敵に十分な打撃を与えられる兵力を持っていたが、ウクライナおよびそれを海上より支援していたアイスランド軍と歩調を合わせることができず、ウクライナ・フィンランド互いにカノン砲を使い果たした状態でフィンランド都市の防御に隙ができるというチャンスに恵まれたも関わらず、ハッカー軍が動くことはなかった。
ハッカー軍はアステカ軍の2倍相当の損害を出しながらも、撃破したユニットはアステカ軍の撃破数の半分程度、この数はウクライナ陣営が2度目の開戦以後撃破したユニットのうち20%にも満たず、戦局にほとんど影響を与えなかった。
ウクライナは一時的に5都市にまで追い込まれるが、ウクライナの前線の都市が占領ではなく破壊されたことから敵の支配下には落ちておらず、反攻を行い3都市を再度獲得。
フィンランドとウクライナの国境線付近で都市の占領と奪還を繰り返す一進一退の戦況となる。
激しい戦闘が続く中ゲーム終了ターン直前となり、最後の攻勢をかけ互いに都市を占領しあいゲーム終了となった。&lt;/p&gt;

&lt;h2 id=&#34;ゲーム終了:28daa66540c07a81521e24fffe429e66&#34;&gt;ゲーム終了&lt;/h2&gt;

&lt;p&gt;2度目の戦争はフィンランド本土全都市の奪還およびウクライナ本国都市の破壊と、緒戦はフィンランドの優勢で始まったが、その後ウクライナ側が押し返し混戦状態となった。
ゲーム終了時にはウクライナ本国の都市2つが破壊された状態となり、一方でフィンランドも本土および南極の1都市ずつがウクライナの占領下にあるという状態であった。
結果としてウクライナの都市数はプラスマイナス0、フィンランドが2都市を失っていることとなる。
これはウクライナ-フィンランド両陣営間の2度にわたる戦争のうち2度目はフィンランド優位に推移したが、1度目の戦争においてウクライナはフィンランドの都市3つを占領するという大きな勝利を収めており、結果として2度目の戦争における損失が抑えられたことによるものと考えられる。&lt;/p&gt;

&lt;p&gt;最終的に、ウクライナのユニット撃破数が336と他国を大きく引き離しており、これがスコアに大きく影響し、ウクライナの勝利に繋がった。&lt;/p&gt;

&lt;p&gt;実際、ウクライナ陣営がアッシリアとの戦争で疲弊していた一方で、内政で上位にあったフィンランドとアステカの2国が手を組んだことはゲームの流れを決定づけるに値する出来事であったといえる。
その後戦争が発生せず世界的に内政を進める流れとなった場合、フィンランド陣営が圧倒的有利となっていただろう。
比較的早期にフィンランド-アステカに対して開戦し、一方的に都市を奪取するという戦果を挙げたことがこのゲームの流れを変え、後に全世界を巻き込む大戦へと発展しウクライナに勝利をもたらしたといえるだろう。&lt;/p&gt;

&lt;p&gt;なおハッカーはゲーム開始時からの同盟国であったが、その機会に恵まれた一方で内政は進まず、また3度も大戦争を繰り広げているウクライナの同盟国であるにもにもかかわらずユニット撃破数は100に達しておらず、さらには視界を敵陣営に横流しする重大な裏切りを働くなど、こいつ居ないほうが良かったんじゃないかという感は大いに否めないものがある。&lt;/p&gt;

&lt;p&gt;あと久々にプレイ日記書いたら例のごとくたくさん書きすぎました。ここまで読んでくださった方に感謝します。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Hugoを導入してブログを作った デプロイ編</title>
      <link>http://tatamo.81.la/blog/2016/01/05/hugo-deployment/</link>
      <pubDate>Tue, 05 Jan 2016 20:50:32 +0900</pubDate>
      
      <guid>http://tatamo.81.la/blog/2016/01/05/hugo-deployment/</guid>
      <description>
        

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;によって構築したサイトを、GitHub,Wercker,DeployBotを経由してWebサーバー上にデプロイした流れです。今回はHugo自体はほとんど触れていません。&lt;/p&gt;

&lt;h2 id=&#34;werckerを使って自動ビルドする:288053c42ac37fddb3dbfcd51f807cce&#34;&gt;Werckerを使って自動ビルドする&lt;/h2&gt;

&lt;p&gt;まずはビルドを手元ではなくオンライン上で自動的に行うようにします。
記事を書いて反映させる際は記事編集→ビルド→アップロードという3つの手順を踏みますが、これによってビルド作業を手元で行わなくてもよくなります。
また、Hugoの環境がなくても、gitさえ使うことができれば記事の更新を行うことができるようになります。&lt;/p&gt;

&lt;p&gt;今回使用した&lt;a href=&#34;http://wercker.com/&#34;&gt;Wercker&lt;/a&gt;は、このような自動ビルド作業およびデプロイ作業を自動化してくれるCIサービスです。
Werckerを利用した自動デプロイは、&lt;a href=&#34;https://gohugo.io/tutorials/automated-deployments/&#34;&gt;Hugoの公式ドキュメント&lt;/a&gt;に記事があるため、これを参考に行います。
この記事はGitHub Pagesへのデプロイまで解説してありますが、今回の環境ではFTPによるサーバーへのアップロードが必要だったため、もうひと手間かける必要がありました。&lt;/p&gt;

&lt;h3 id=&#34;wercker-ymlの記述:288053c42ac37fddb3dbfcd51f807cce&#34;&gt;wercker.ymlの記述&lt;/h3&gt;

&lt;p&gt;公式ドキュメントによる解説にも書いてありますが、Werckerによる自動ビルド/デプロイを利用するには、対象のGitHubリポジトリ内にwercker.ymlというファイルを作成し、そこに設定やビルド時の処理を記述する必要があります。
既にHugoビルド用の設定を作ってくれている人がいるので、それを利用すれば簡単にビルドができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;box: debian 
build:
  steps:
    - arjen/hugo-build:
        version: &amp;quot;0.14&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけでHugoのビルドが可能です。
ビルドが完了しただけではまだ目的のサーバーにHugoサイトがアップロードされていませんので、続いてデプロイの設定を行います。&lt;/p&gt;

&lt;h2 id=&#34;werckerとdeploybotを使って自動デプロイする:288053c42ac37fddb3dbfcd51f807cce&#34;&gt;WerckerとDeployBotを使って自動デプロイする&lt;/h2&gt;

&lt;p&gt;前述のように、今回使用している環境ではWebサーバーにFTPでアップロードすることが目的のため、デプロイはwerckerからlftpを使用して行おうとしましたが、うまくいきませんでした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;box: debian 
build:
  steps:
    - arjen/hugo-build:
        version: &amp;quot;0.14&amp;quot;
deploy:
  steps:
    - install-packages:
        packages: lftp
    - script:
        name: mirror over lftp
        code: |
            lftp -u $DEPLOY_FTP_USER,$DEPLOY_FTP_PASS -e &amp;quot;set ftp:passive-mode off;set ftp:ssl-allow off;set net:timeout 5;set net:max-retries 3;set net:reconnect-interval-max 60;mirror -enR public /blog;quit&amp;quot; $DEPLOY_FTP_SERVER
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;lftpでの接続に失敗し、アップロードを行うことができませんでした。
PASVモードのon/off、sslを使用しないようにするなどのオプションを試みましたが、コネクションがうまく確立できず失敗しました。&lt;/p&gt;

&lt;p&gt;後日また調べてみたいと思っていますが、ひとまずFTPでのアップロードを行うため、別のサービスを利用することにしました。
&lt;a href=&#34;http://deploybot.com/&#34;&gt;DeployBot&lt;/a&gt;は1プロジェクトまで無料で利用できるサービスで、FTPによるアップロードにも対応しているため、これを利用しました。
DeployBotによるデプロイは、&lt;a href=&#34;http://creative-tweet.net/blog/2015/10/usage-hugo-2.html&#34;&gt;Hugoをセットアップしてデプロイするまで［後編］CIサービスでビルドからデプロイを自動化するまで | creative tweet.&lt;/a&gt;で解説されているので、ここを参考にして行いました。&lt;/p&gt;

&lt;p&gt;全体としては、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;記事を書いてGitHub上にpushする&lt;/li&gt;
&lt;li&gt;Werckerが更新を検知して自動的にビルドを行い、別のGitHubリポジトリを更新する&lt;/li&gt;
&lt;li&gt;そのリポジトリの更新を検知してDeployBotによって自動的にサーバーへアップロードする&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;というような流れでのデプロイを行いました。&lt;/p&gt;

&lt;p&gt;Werckerから別のGitHubリポジトリへのpushを行うようにするため、公式ドキュメントに書かれている通りにwercker.ymlを書き換えます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;box: debian 
build:
  steps:
    - arjen/hugo-build:
        version: &amp;quot;0.14&amp;quot;
deploy:
  steps:
    - install-packages:
        packages: git ssh-client
    - leipert/git-push:
        gh-oauth: $GIT_TOKEN
        basedir: public
        repo: $GITHUB_REPO
        clean_removed_files: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;$GIT_TOKEN&lt;/code&gt;および&lt;code&gt;$GITHUB_REPO&lt;/code&gt;は、werckerの設定画面でdeploy targetごとに変数を定義できるため、そこに記述します。$GIT_TOKENはprotectedにチェックを入れ、外部から取得できないようにしておきます。&lt;/p&gt;

&lt;p&gt;あとはwerckerのデプロイ先に指定したGitHubリポジトリをDeployBotに登録するだけです。
DeployBotはリポジトリが更新されるとその内容をそのままサーバー上へアップロードしてくれ、設定も簡単でした。
これで目的のサーバーへの自動デプロイが完了しました。&lt;/p&gt;

&lt;h2 id=&#34;補足など:288053c42ac37fddb3dbfcd51f807cce&#34;&gt;補足など&lt;/h2&gt;

&lt;h3 id=&#34;githubリポジトリの分割:288053c42ac37fddb3dbfcd51f807cce&#34;&gt;GitHubリポジトリの分割&lt;/h3&gt;

&lt;p&gt;Hugoのビルドをローカルでは行わないようにしたため、リポジトリ内に/publicを含める必要がありません。.gitignoreに次の行を記述します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public/
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;リポジトリA:publicディレクトリを除くHugoディレクトリ&lt;/li&gt;
&lt;li&gt;リポジトリB:生成されたpublicディレクトリの内容&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というようなGitHubリポジトリ構成とし、リポジトリBはWerckerとDeployBotをリンクさせるために使用するため手動では触れません。&lt;/p&gt;

&lt;h3 id=&#34;werckerの設定:288053c42ac37fddb3dbfcd51f807cce&#34;&gt;Werckerの設定&lt;/h3&gt;

&lt;h4 id=&#34;dockerの使用:288053c42ac37fddb3dbfcd51f807cce&#34;&gt;Dockerの使用&lt;/h4&gt;

&lt;p&gt;Werckerにプロジェクトを登録する際、wercker.yml設定の項目で「Dockerを使用する」かどうかのチェックボックスが存在します。
Werckerで使用するboxはDockerを使用しているものと使用していないものがあり、Hugo公式ドキュメントで使用しているbox:debianなどはDockerを使用しているため、Docker使用の設定をオンにしておかないと、&lt;a href=&#34;http://thleap.net/blog/recovering-wercker/&#34;&gt;boxが見つからないというエラー&lt;/a&gt;が発生します。
逆にwercker/defaultなどのDockerを使用しないboxを使用する場合、設定をオンにしておく必要はないでしょう。
(なお私はWerckerのBoxについてはよくわかっていません。Hugoをデプロイする場合は公式ドキュメント通りにdebianを使用すればいいのではないでしょうか。wercker/defaultでは環境のセットアップに15秒ほどかかりますが、debianでは1秒で済みます。)&lt;/p&gt;

&lt;h4 id=&#34;デプロイターゲット登録時のauto-deploy設定:288053c42ac37fddb3dbfcd51f807cce&#34;&gt;デプロイターゲット登録時のAuto deploy設定&lt;/h4&gt;

&lt;p&gt;ちょっとしたこと(というかちゃんと読めばわかること)ですが、werckerででプロイターゲットを登録する時、&amp;rdquo;auto deploy successful builds to branch(es):&amp;ldquo;という設定項目でブランチ名を指定する箇所がありますが、これはどのブランチが更新されたときに自動的にビルドが走るかを指定するものであり、デプロイ先のブランチ名を指定するものではありません。
GitHubからGitHubへのデプロイを行うときは少し混乱するかもしれません。&lt;/p&gt;

&lt;p&gt;なお、デプロイ先のGitHubブランチ名は前述したwercker.yml内に指定する箇所があります。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;以上で、Hugoで生成したサイトを自動的にデプロイすることができました。
とはいえWerckerから直接デプロイすることに失敗したためにやや回りくどい方法をとっており、いずれ改善したいと思っています。&lt;/p&gt;

&lt;p&gt;Werckerはビルドごとに環境を最初から設定するため、ライブラリのインストールなども毎回行われ、ビルド環境が整うまでに1分ほどかかります。
手元でビルドができる環境ならばローカルでビルドしてアップロードしたほうが明らかに速いので、すぐに更新したいときなどはデプロイまでにかなり時間がかかる印象を受けます。
Werckerを経由せず、手動でアップロードできる方法も用意しておいたほうがいいのかもしれません。&lt;/p&gt;

&lt;p&gt;また、稀にですがWerckerのビルドが最初のsetup environmentの段階で動かなくなり、Abortも効かない状態でビルドに失敗したことがありました。
デプロイを自動で行っているとはいえ、結局デプロイがうまくいったかどうか確認しないといけないのは問題かもしれません。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Hugoを導入してブログを作った サイト構築編</title>
      <link>http://tatamo.81.la/blog/2015/12/17/hugo-implementation/</link>
      <pubDate>Thu, 17 Dec 2015 03:51:04 +0900</pubDate>
      
      <guid>http://tatamo.81.la/blog/2015/12/17/hugo-implementation/</guid>
      <description>
        

&lt;p&gt;この記事は&lt;a href=&#34;http://www.adventar.org/calendars/891&#34;&gt;KobeUniv Advent Calendar 2015&lt;/a&gt;の17日の記事です。なんとか期日に間に合いそうです。
なお私は当該大学の学部1年(2015年12月現在)です。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;このブログを作るにあたって、&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;を使用しました。
Hugoを用いたサイト構築の基本的な考え方や流れの紹介、その際に詰まったことなど。&lt;/p&gt;

&lt;h2 id=&#34;そもそもhugoって何:618f10612e6a9a223dbbbddb739583ff&#34;&gt;そもそもHugoって何&lt;/h2&gt;

&lt;p&gt;静的なWebサイトを生成するためのエンジンです。
つまり:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;まずレイアウトを用意します&lt;/li&gt;
&lt;li&gt;次に記事を書きます&lt;/li&gt;
&lt;li&gt;hugoを実行します&lt;/li&gt;
&lt;li&gt;記事がHTMLに変換され、Webサイトが生成されます&lt;/li&gt;
&lt;li&gt;生成されたサイトをまるごとサーバーにアップロードします&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これでWebサイトの完成というわけです。
あくまで静的なサイトなので、サーバーサイドでプログラムを走らせる必要もありません。&lt;/p&gt;

&lt;h2 id=&#34;hugoを使ってみる:618f10612e6a9a223dbbbddb739583ff&#34;&gt;Hugoを使ってみる&lt;/h2&gt;

&lt;p&gt;Hugoのインストール等については、既に多くの情報がネット上にあるため割愛します。&lt;/p&gt;

&lt;h3 id=&#34;hugoの基本的なディレクトリ構成:618f10612e6a9a223dbbbddb739583ff&#34;&gt;Hugoの基本的なディレクトリ構成&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo new site name_of_my_site
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行することで、サイト用のディレクトリが生成されます。
中には、config.tomlといくつかのディレクトリが生成されているはずです。
config.tomlはサイト全体の設定を記述するファイルです。なお、代わりにconfig.yamlとしてYAMLで記述することなども可能です。お好みで変更しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd name_of_my_site/
$ ls -p
archetypes/  config.toml  content/  data/  layouts/  static/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;contentディレクトリは、記事ファイルを配置する場所です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hugo new hoge.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などとするとcontent内にmdファイル(記事は主にMarkdownで記述します)が生成されますので、これを編集して記事を作ることになります。&lt;/p&gt;

&lt;p&gt;また、layoutディレクトリにはWebサイトの基礎となるテンプレートを配置します。
基本的には独自のテンプレート記法が用いられたhtmlファイルを使います。
既存のテーマを利用する場合は、themesディレクトリを作り、そこに同様のテンプレートが同梱されたテーマを配置することになります。&lt;/p&gt;

&lt;p&gt;staticディレクトリには、CSSや画像などの静的なファイルを配置します。
このディレクトリ内にあるファイルは、生成時にサイトのルートディレクトリにそのままコピーされます。&lt;/p&gt;

&lt;p&gt;基本的には、この3つ(または4つ)のディレクトリの働きを把握しておけば、Hugoでサイトを作りはじめるのに不足はないかと思われます。&lt;/p&gt;

&lt;p&gt;また、hugoコマンドなどによって生成された完成品のサイトは、publicというディレクトリが作られてそこに配置されます。
サイトを公開するときは、publicディレクトリ下に生成されたファイルをすべてアップロードします。
なお、publicディレクトリ内に不要になったファイルがあったとしても、サイト生成時に削除されません。本番サイトの生成時にはpublicディレクトリを一度削除してからビルドを行うのが良いと思われます。&lt;/p&gt;

&lt;h3 id=&#34;レイアウトしてみる:618f10612e6a9a223dbbbddb739583ff&#34;&gt;レイアウトしてみる&lt;/h3&gt;

&lt;h4 id=&#34;テーマを使う:618f10612e6a9a223dbbbddb739583ff&#34;&gt;テーマを使う&lt;/h4&gt;

&lt;p&gt;いくつものHugoのレイアウトが&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;公開されて&lt;/a&gt;います。基本的には、この中から気に入ったものを使うのが良さそうです。themesディレクトリ直下にテーマごとのディレクトリを作り、その中にテーマファイルを配置します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone --recursive https://github.com/spf13/hyde themes/hyde
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テーマを適用するときは、configファイル内でテーマを指定するか、hugoコマンドの実行時に&lt;code&gt;hugo -t hyde&lt;/code&gt;または&lt;code&gt;hugo server -t hyde&lt;/code&gt;のように-tオプションでテーマを指定します。ここで指定するテーマ名は、themes直下に配置したディレクトリの名前となります。
テーマを適用すると、hugoディレクトリ直下のファイルが読み込まれるよりも先に、そのテーマディレクトリ下に存在するファイルが読み込まれるようになります。&lt;/p&gt;

&lt;p&gt;既存のテーマを使用する場合、テーマによってconfigに記述する必要のある内容が大きく異なる可能性があります。READMEにどのような項目を記述すればいいかが書かれていると思いますので、必ず確認するのがいいでしょう。&lt;/p&gt;

&lt;h4 id=&#34;自分でレイアウトする:618f10612e6a9a223dbbbddb739583ff&#34;&gt;自分でレイアウトする&lt;/h4&gt;

&lt;p&gt;HugoはGo言語のテンプレートエンジンを使用しており、各種パラメータを呼び出したり、部分ごとにHTMLファイルを分けて再利用することでサイトのレイアウトを記述していくことができます。&lt;/p&gt;

&lt;p&gt;自分でHugoサイトをレイアウトする場合、確実に一定の学習コストが必要となるので、ここでは詳細には触れません。Hugoは公式ドキュメントが充実しているので、&lt;a href=&#34;https://gohugo.io/tutorials/creating-a-new-theme/&#34;&gt;公式チュートリアル&lt;/a&gt;などから始めるのがいいでしょう。また基本的なことであれば調べれば日本語の情報も得られると思います。&lt;/p&gt;

&lt;h2 id=&#34;詰まったことなど:618f10612e6a9a223dbbbddb739583ff&#34;&gt;詰まったことなど&lt;/h2&gt;

&lt;p&gt;今回はHTMLやCSSを自分で書いてサイトを一つ作りたいと思っていた&lt;del&gt;のと、自分以外のテーマ作者名の表記がページに現れるのが気に食わなかった&lt;/del&gt;ので、このサイトでは既存のテーマを使用せず、自前でレイアウトを記述して構築しました。
その途中で、いくつか不具合に遭遇して詰まったりしました。&lt;/p&gt;

&lt;h3 id=&#34;バージョン0-14-配列の並び替えにバグがある:618f10612e6a9a223dbbbddb739583ff&#34;&gt;(バージョン0.14)配列の並び替えにバグがある&lt;/h3&gt;

&lt;p&gt;サイドバーに最近の投稿やタグ・カテゴリの一覧を表示させる際、たとえば&lt;code&gt;.Reverse&lt;/code&gt;や&lt;code&gt;.ByDate&lt;/code&gt;で並び替えを行うと、ページによって正常に並び替えが行われなかったり、ビルドするたびに並び順が変わる、低確率で配列の中身が重複して表示されたりします。
これは並び替えを行う関数が配列そのものに変更を加えているのが原因です。さらにビルド時に並列処理が行われることで処理順がビルドのたびに変化し得るため、同じ記述をしていてもページによって表示される内容が変わるといった不具合が発生したり、そのバグの再現性が低くなったりします。&lt;/p&gt;

&lt;p&gt;このバグは開発版のバージョン0.15では&lt;a href=&#34;https://discuss.gohugo.io/t/error-when-trying-to-sort/1390/4&#34;&gt;修正済み&lt;/a&gt;であり、現行のバージョン0.14まででのみ発生します。&lt;/p&gt;

&lt;h3 id=&#34;rssuriオプションは使ってはいけない:618f10612e6a9a223dbbbddb739583ff&#34;&gt;RSSUriオプションは使ってはいけない&lt;/h3&gt;

&lt;p&gt;Hugoではビルド時に自動的にRSSフィードも生成されますが、そのファイル名は常にindex.xmlとなります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rssuri = &amp;quot;rss.xml&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにconfigファイル中に記述することで、RSSファイル名を変更する機能がありますが、この機能には&lt;a href=&#34;https://github.com/spf13/hugo/issues/1147&#34;&gt;いくつもの欠陥がある&lt;/a&gt;ため使ってはいけません。(2015年12月、バージョン0.14時点)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ルートディレクトリ直下のRSSファイルのファイル名はこの設定によって変更できるが、それ以外のRSSファイルはすべてindex.xmlのままになってしまう&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.RSSlink&lt;/code&gt;などの変数を呼び出すと、間違ったリンクが返される&lt;/li&gt;
&lt;li&gt;RSSファイル内のURLが間違ったものになる&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hugoを使ってみた感想:618f10612e6a9a223dbbbddb739583ff&#34;&gt;Hugoを使ってみた感想&lt;/h2&gt;

&lt;p&gt;Hugoはシンプルで生成が非常に速いという評判があったため導入してみましたが、実際にサイトを構築してみると確かにそのような設計であることがよく感じられました。必要最小限の機能を持つように出来ており、簡潔なディレクトリ構造はとてもわかりやすいです。
生成速度についてはまだ記事数が少ないため何とも言えませんが、今のところは一瞬でビルドが完了するので良い感じだと思います。&lt;/p&gt;

&lt;p&gt;とはいえ、レイアウトから自前で書き始めるといくつかの不満点が出てきます。
レイアウトに使用するテンプレートはHugoの全体の印象に反して煩雑です。そのため、Hugo特有のレイアウトの記述方法にある程度習熟しておくことは不可欠となります。
しかし、Hugoは公式ドキュメントが非常に豊富ではあるのですが、決して使いやすいというわけではないと思います。
全体を通して解説風のドキュメントとなっているために最初はわかりやすいのですが、それ故にリファレンスとしての機能を十分に果たしておらず、また別途APIリファレンスなどがあるわけでもないので、テンプレートなどの機能を調べるのがやや困難です。
(とはいえ、基本はGo言語のテンプレートエンジンを用いているらしいので、既にGoに慣れている方にとっては問題ないのかもしれません)&lt;/p&gt;

&lt;p&gt;Hugoで使用するパラメータは、TaxonomyやPaginatorの概念が存在していることによってやや複雑な構造をしているため、ドキュメントの見通しが悪いのは問題になりがちだと思います。(rangeで.Data等で提供される配列の中身を回す時とTaxonomyを回すときの扱い方が微妙に異なるなど)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;以上、Hugoを使ったサイト構築の紹介でした。
Hugoでサイトを作ってからWeb上にデプロイするまでも一苦労あったので、後日その流れについても書いてみたいと思っています。&lt;/p&gt;

&lt;p&gt;あとページのデザイン難しいです。
CSS周りについても記事を書いてみたいですが、あまりに試行錯誤の連続なので何も書くことがないかもしれません……&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>highlight.jsをインライン要素にも適用できるようにした</title>
      <link>http://tatamo.81.la/blog/2015/12/12/apply-highlightjs-to-inline/</link>
      <pubDate>Sat, 12 Dec 2015 01:01:51 +0900</pubDate>
      
      <guid>http://tatamo.81.la/blog/2015/12/12/apply-highlightjs-to-inline/</guid>
      <description>
        

&lt;p&gt;このブログのシンタックスハイライトには&lt;a href=&#34;https://highlightjs.org/&#34;&gt;highlight.js&lt;/a&gt;を使用しています。&lt;/p&gt;

&lt;p&gt;デフォルトでは適用できないインラインのコードのハイライトも行えるようにしましたので、適用の流れなど。&lt;/p&gt;

&lt;h2 id=&#34;highlight-jsって何:dbe2fecfd9603c43589f9d37f36eba56&#34;&gt;highlight.jsって何&lt;/h2&gt;

&lt;p&gt;JavaScriptによって、Webページ内のソースコードを色付けしてくれるものです。
たとえば:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for i in range(1,101) :
    print (&amp;quot;Fizz&amp;quot; if not i%3 else &amp;quot;&amp;quot;) + (&amp;quot;Buzz&amp;quot; if not i%5 else &amp;quot;&amp;quot;) or i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://highlightjs.org/static/demo/&#34;&gt;highlight.js demo&lt;/a&gt;を見れば、どのようにハイライトされるのか、どのようなテーマがあるのかが簡単にわかるので良いと思います。
(しかし思うのですが、自分のサイトに導入を検討する際に、この濃い赤色の背景色だと白色の背景と感覚が違ってくるのでやや選びにくいのではないでしょうか……。
コンソールから&lt;code&gt;document.body.style.backgroundColor=&amp;quot;#FFFFFF&amp;quot;;&lt;/code&gt;とでも入力して、背景を白く変更してから見てみるのがいいかもしれません。)&lt;/p&gt;

&lt;h2 id=&#34;インライン要素でもハイライトできるようにしてみた:dbe2fecfd9603c43589f9d37f36eba56&#34;&gt;インライン要素でもハイライトできるようにしてみた&lt;/h2&gt;

&lt;p&gt;通常では、highlight.jsによるハイライトは&lt;code&gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&lt;/code&gt;から&lt;code&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;/code&gt;で囲まれたブロック要素にのみ適用され、インライン要素に適用することはできません。1行の中にコードを埋め込みたいことも多いので、これではやや不便です。&lt;/p&gt;

&lt;p&gt;Markdownの展開方法に適用できるように、&lt;code&gt;&amp;lt;code&amp;gt;&amp;lt;/code&amp;gt;&lt;/code&gt;で囲まれた要素をハイライトすることにします。
既に先人たちが記事を書いてくれているので、基本的にはそれを参考にするだけでした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kenzauros.com/blog/apply-highlight-js-to-inline-source-code/&#34;&gt;highlight.jsでインラインのソースコードもハイライトする | blog@kenzauros.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://swiftrithm.com/blog/highlightjs-install/&#34;&gt;軽いとうわさのhighlight.jsをTwenty Fifteenに導入、ソースコードを綺麗に表示 &amp;#8211; SWIFTRITHM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上記のサイトでは共にJQueryを用いていますが、このサイトでは特にJQueryを導入する気もなかったため、生のJavaScript+DOMで適当に書き直しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script&amp;gt;
// hljs.initHighlightingOnLoad();
window.addEventListener(&amp;quot;DOMContentLoaded&amp;quot;, function(){
    var elements = document.getElementsByTagName(&amp;quot;code&amp;quot;);
    var l=elements.length;
    for(var i=0; i&amp;lt;l;i++){
        var el = elements[i];
        hljs.highlightBlock(el);
        if(el.parentNode.tagName.toLowerCase() != &amp;quot;pre&amp;quot;) {
            el.style.display = &amp;quot;inline&amp;quot;;
            el.style.margin = &amp;quot;0 2px&amp;quot;;
            el.style.padding = &amp;quot;1px 3px&amp;quot;;
        }
    }
}, false);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;通常&lt;code&gt;hljs.initHighlightingOnLoad();&lt;/code&gt;を呼ぶところを、上記のコードで置き換えるだけで完了です。
親要素が&lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;ではない場合にインライン化するようにしています。
またスタイルの指定も同時に行っているので、別途CSSを記述する必要はありません。&lt;/p&gt;

&lt;p&gt;既に記事内で何回も使用しているので今更感はありますが、実際にインラインのコードがハイライトされるか見てみましょう。
たとえば、このように:&lt;code&gt;print &amp;quot;\n&amp;quot;.join([&amp;quot;Fizz&amp;quot;*(not i%3)+&amp;quot;Buzz&amp;quot;*(not i%5) or str(i) for i in range(1,101)])&lt;/code&gt;1行のコードでもうまくハイライトされているのがわかります。
やったね。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>ブログはじめました</title>
      <link>http://tatamo.81.la/blog/2015/12/11/hello-world/</link>
      <pubDate>Fri, 11 Dec 2015 00:00:00 +0900</pubDate>
      
      <guid>http://tatamo.81.la/blog/2015/12/11/hello-world/</guid>
      <description>
        &lt;p&gt;ブログはじめました。&lt;/p&gt;

&lt;p&gt;まだデザインや機能が十分ではないような感じがしますが、少しずつ改良していこうと思います。&lt;/p&gt;

&lt;p&gt;以下はシンタックスハイライトのテストです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;for x in range(10) :
    print x
&lt;/code&gt;&lt;/pre&gt;

      </description>
    </item>
    
  </channel>
</rss>